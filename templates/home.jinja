<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 2px;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .requests {
        float: left;
        margin-bottom: 5px;
    }

    .received {
        margin-bottom: 10px;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username | escape }} </li>
    </ol>
</nav>

<!-- Display friends list upon successful login-->
<div style="border-bottom: 1px solid black;">
    <ul id="friend_list" style="float: left">
        <h2>My friends:</h2>
        {% if friends %}
        {% for friend in friends %}
        <li style="display:inline-block">
            <div class="{{ friend.username | escape }}">
                <span>{{ friend.username | escape}}</span>
                <button onclick="join_room( '{{ friend.username | escape }}' )">Chat</button>
            </div>
        </li>
        {% endfor %}
        {% else %}

        {% endif %}
    </ul>
</div>

<div>
    <ul id="pending_requests" style="float: right">
        <h2>Pending friend requests:</h2>
        {% if pending %}
        {% for request in pending %}
        <li style="display:inline-block">
            <div class="{{ request.receiver | escape }}">
                {{ request.receiver | escape }}
            </div>
        </li>
        {% endfor %}
        {% else %}

        {% endif %}
    </ul>
</div>

<div>
    <ul id="received_requests" style="float: right">
        <h2>Received friend requests:</h2>
        {% if received %}
        {% for request in received %}
        <li style="display:inline-block">
            <div class="{{ request.sender | escape }}">
                <span>{{ request.sender | escape }}</span>
                <button onclick="accept('{{ request.sender | escape }}')">Accept</button>
                <button onclick="decline('{{ request.sender | escape }}')">Decline</button>
            </div>
        </li>
        {% endfor %}
        {% else %}

        {% endif %}
    </ul>
</div>


<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>


    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box" style="display: none">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <section id="friend_requests_box">
        <p class="text">Send a friend request to: </p>
        <input id="new_friend" placeholder="username">
        <button onclick="send_friend_request()">Send request</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none">
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cryptico/0.0.1343522940/cryptico.min.js"></script>
<script>
    let room_id = 0;

    (function (c) {
        var parametersBigint = ["n", "d", "p", "q", "dmp1", "dmq1", "coeff"];
        c.privateKeyFromString = function (string) {
            var keyObj = JSON.parse(string);
            var rsa = new RSAKey();
            parametersBigint.forEach(function (parameter) {
                rsa[parameter] = parseBigInt(c.b64to16(keyObj[parameter].split("|")[0]), 16);
            });
            rsa.e = parseInt("03", 16);
            return rsa
        }
    })(cryptico)


    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $("#new_friend").on("keyup", (e) => {
        if (e.key == "Enter") {
            send_friend_request();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        // $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    //xss input sanitization
    function htmlEncode(str) {
        return String(str).replace(/[^\w. :]/gi, function (c) {
            return '&#' + c.charCodeAt(0) + ';';
        });
    }

    let username = htmlEncode("{{ username }}");

    Cookies.set('username', username, { secure: true, expires: 1 });

    // initializes the socket
    const socket = io();

    socket.on("pubkey_first", (data) => {
        localStorage.setItem(data.guy, data.pubkey);
        let pubkey = localStorage.getItem('public');
        let friendname = Cookies.get('friendname');
        socket.emit("exchange", friendname, pubkey, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
        });
    })

    socket.on("pubkey_second", (data) => {
        localStorage.setItem(data.guy, data.pubkey);
    })

    socket.on("historydump", (data) => {
        for (let i = 0; i < data.length; i++) {
            let e = data[i]
            if (e[2] == 'msg') {
                try {
                    let priv = cryptico.privateKeyFromString(localStorage.getItem("private"));
                    console.log(e[0].cipher)
                    let a = cryptico.decrypt((e[0]).cipher, priv);
                    add_message(a.plaintext, e[1]);
                } catch (error) {
                    console.error("Decryption failed: ", error);
                }
            } else {
                add_message(('Server: ' + e[0]), e[1])
            }
        }
    })

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color, msgtype) => {
        if (msgtype == 'msg') {
            try {

                let priv = cryptico.privateKeyFromString(localStorage.getItem("private"));
                let friendpub = cryptico.publicKeyID(localStorage.getItem(Cookies.get('friendname')));
                let a = (cryptico.decrypt(msg.cipher, priv));
                console.log(a)
                if (cryptico.publicKeyID(a.publicKeyString) == friendpub) {
                    console.log('ARRR')
                    add_message(a.plaintext, color);
                    let pubkey = localStorage.getItem('public');
                    let newmsg = cryptico.encrypt(a.plaintext, pubkey)
                    socket.emit("receiver_encrypt", newmsg, room_id);
                }
            } catch (error) {
                console.error("Decryption failed", error);
            }
        } else {
            add_message(('Server: ' + msg), color);
        }
    })


    // we'll send the message to the server by emitting a "send" event
    function send() {
        //xss
        let tempmsg = htmlEncode($("#message").val());

        let message = username + ": " + tempmsg

        //encrypt message with receiver's public key (encrypt_key)
        let friendname = Cookies.get('friendname');
        let friend_key = localStorage.getItem(friendname);
        let our_key = localStorage.getItem('public');

        let priv = cryptico.privateKeyFromString(localStorage.getItem("private"));

        let forfriend = cryptico.encrypt(message, friend_key, priv);
        let forus = cryptico.encrypt(message, our_key);

        socket.emit("send", friendname, forfriend, forus, room_id, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            } else {
                add_message(message, "black");
            }
        });

    }

    // we emit a join room event to the server to join a room
    function join_room(rec) {
        //xss
        let receiver = htmlEncode(rec)
        console.log(receiver)

        // pass in the receiver of our message to the server
        // as well as the current user's username
        Cookies.set('friendname', receiver);
        console.log()
        let publickey = localStorage.getItem('public');
        socket.emit("join", receiver, publickey, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res == "string") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);


            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();


        });
    }
    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        let friendname = Cookies.get('friendname')
        //add_message(`${username} has left the room`, 'red');
        socket.emit("leave", friendname, room_id, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            } else {

            }
        });
        $("#input_box").hide();
        let box = $("#message_box");
        box.empty();
        room_id = 0;
    }

    function accept(sender) {
        let sender_name = htmlEncode(sender);

        socket.emit("accept", sender_name, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
            displayFriend(sender_name)
            removeRequest(sender_name)

        });

    }

    function decline(sender) {
        let sender_name = htmlEncode(sender);

        socket.emit("decline", sender_name, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            } else {
                removeRequest(sender_name)
            }
        });

    }

    // Removes a displayed sent request (Client side)
    function removeRequest(senderName) {
        // Get all <li> elements inside the received requests list
        let liElements = document.querySelectorAll("#received_requests li");
        console.log(liElements)
        // Loop through each <li> element
        liElements.forEach(function (li) {
            // Find the <div> element inside the <li>
            var div = li.querySelector("." + senderName);
            console.log(div)
            if (div) {
                // Remove the <div> element from its parent node (the <li>)
                div.parentNode.removeChild(div);
                console.log("removed")
            }
        });
    }


    // Emit a send_request event to the server to make a new friend request
    function send_friend_request() {
        //xss
        let new_friend = htmlEncode($("#new_friend").val());
        console.log(new_friend)

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("send_request", new_friend, (res) => {
            if (res != 0) {
                alert(res);
                return;
            } else {
                displayPending(new_friend);
            }
        });


    }

    // Displays your pending requests (client side)
    function displayPending(fri) {
        // Get the UL element

        //xss
        let friend = htmlEncode(fri);

        var ul = document.getElementById("pending_requests");

        //li
        var li = document.createElement("li");
        li.style.display = "inline-block";

        //div
        var div = document.createElement("div");
        div.className = friend;

        //span
        var span = document.createElement("span");
        span.textContent = htmlEncode(friend);

        div.appendChild(span);
        li.appendChild(div);
        ul.appendChild(li);
    }


    //Check if one of your requests got accepted
    socket.on("check_accepted_requests", (sender) => {
        displayFriend(sender);
        removePending(sender);
    })

    //Check if one of your requests got declined
    socket.on("check_declined_requests", (sender) => {
        removePending(sender);
    })

    // Removes pending request (client side)
    function removePending(senderName) {
        let liElements = document.querySelectorAll("#pending_requests li");
        console.log(liElements);
        liElements.forEach(function (li) {
            var div = li.querySelector("." + senderName);
            console.log(div)
            if (div) {
                div.parentNode.removeChild(div);
                console.log("removed");
            }
        });
    }

    function displayFriend(fri) {

        let friend = htmlEncode(fri);

        var ul = document.getElementById("friend_list");

        //li
        var li = document.createElement("li");
        li.style.display = "inline-block";

        //div
        var div = document.createElement("div");
        div.className = friend;

        //span
        var span = document.createElement("span");
        span.textContent = htmlEncode(friend);

        //chat button
        var chatBtn = document.createElement("button");
        chatBtn.textContent = "Chat";
        chatBtn.onclick = function () {
            join_room(friend);
        };

        div.appendChild(span);
        div.appendChild(chatBtn);
        li.appendChild(div);
        ul.appendChild(li);
    }

    //Check for any incoming requests
    socket.on("incoming_request", (sender) => {
        if (sender == Cookies.get('username')) {

        } else {
            displayRequest(sender);
        }
    })

    //Displays a request that you received from someone (client side)
    function displayRequest(sender) {
        //xss
        let sender_name = htmlEncode(sender)

        var ul = document.getElementById("received_requests");

        var li = document.createElement("li");
        li.style.display = "inline-block";

        var div = document.createElement("div");
        div.className = sender;

        //span
        var span = document.createElement("span");
        span.textContent = htmlEncode(sender_name);

        //accept button
        var acceptBtn = document.createElement("button");
        acceptBtn.textContent = "Accept";
        acceptBtn.onclick = function () {
            accept(sender_name);
        };

        //decline button
        var declineBtn = document.createElement("button");
        declineBtn.textContent = "Decline";
        declineBtn.onclick = function () {
            decline(sender_name);
        };

        // Append span, buttons to  div
        div.appendChild(span);
        div.appendChild(acceptBtn);
        div.appendChild(declineBtn);

        // Append div to list
        li.appendChild(div);

        // Append list to ul
        ul.appendChild(li);
    }


    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color, flag = false) {
        let box = $("#message_box");

        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(htmlEncode(message));//xss prevention
        box.append(child);
    }

    window.onbeforeunload = function () {
        Cookies.remove("room_id");
        Cookies.remove("username");
        Cookies.remove("friendname");
        localStorage.clear();
    };

</script>
{% endblock %}