<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 2px;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .requests {
        float: left;
        margin-bottom: 5px;
    }

    .received {
        margin-bottom: 10px;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username }} </li>
    </ol>
</nav>

<!-- Display friends list upon successful login-->
<div style="border-bottom: 1px solid black;">
    <ul id="friend_list" style="float: left">
        <h2>My friends:</h2>
        {% if friends %}
        {% for friend in friends %}
        <li style="display:inline-block">
            <div class="received">
                <span>{{ friend.username }}</span>
                <button onclick="join_room( {{ friend.username }} )">Chat</button>
            </div>
        </li>
        {% endfor %}
        {% else %}
        <p> You have no friends :&#40;
        <p>
            {% endif %}
    </ul>
</div>

<div>
    <ul id="pending_requests" style="float: right">
        <h2>Pending friend requests:</h2>
        {% if pending != [] and pending is not none and pending != -1 %}
        {% for request in pending %}
        <li style="display:inline-block">
            {{ request.receiver }}
        </li>
        {% endfor %}
        {% else %}
        <p> You have no pending requests!
        <p>
            {% endif %}
    </ul>
</div>

<div>
    <ul id="received_requests" style="float: right">
        <h2>Received friend requests:</h2>
        {% if received != [] and received is not none and received != -1 %}
        {% for request in received %}
        <li style="display:inline-block">
            <div class="received">
                <span>{{ request.sender }}</span>
                <button onclick="accept('{{ request.sender }}')">Accept</button>
                <button onclick="decline('{{ request.sender }}')">Decline</button>
            </div>
        </li>
        {% endfor %}
        {% else %}
        <p> No one wants to be your friend :&#40;
        <p>
            {% endif %}
    </ul>
</div>

<h1>WhyApp </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>


    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box" style="display: none">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <section id="friend_requests_box">
        <p class="text">Send a friend request to: </p>
        <input id="new_friend" placeholder="username">
        <button onclick="send_friend_request()">Send request</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none">
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $("#new_friend").on("keyup", (e) => {
        if (e.key == "Enter") {
            send_friend_request();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        // $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color = "black", room_id) => {

        let priv = localStorage.getItem("private");
        let plain_text = cryptico.decrypt(msg, priv);

        add_message(plain_text, color);

    })

    function send_friend_request() {
        console.log("test?")

        let new_friend = $("#new_friend").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("send_request", username, new_friend, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }

            //append new_friend to pending requests
        });
    }

    function accept(sender_name) {
        console.log("testing")
        console.log(sender_name)
        console.log(username)


        socket.emit("accept", sender_name, username, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
            // friends.push(res);
        });

        //add new friend to friend list on screen
        let friend_list = $("#friend_list").val();
        add_list_item(sender_name, friend_list);

        //message history storage
        //const history = [];
        //localStorage.setItem(sender_name, history);
    }

    function decline(sender_name) {
        socket.emit("decline", sender_name, username, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
        });
    }

    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");

        add_message(message, "black")

        //encrypt message with receiver's public key (encrypt_key)
        let priv = localStorage.getItem("private")
        let cipher_text = cryptico.encrypt(message, encrypt_key, priv)

        socket.emit("send", username, message, room_id);
    }

    // we emit a join room event to the server to join a room
    function join_room(receiver) {

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            //public key to encrypt messages with
            socket.on("receiver key", (key) => {
                encrypt_key = key;
            });
            friend_username = receiver;

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#input_box").show();

        });

        //show message history upon successful join
        const history = localStorage.getItem(friend_username);
        history.forEach(show_history);
    }

    // emit a send_request event to the server to make a new friend request
    function send_friend_request() {
        console.log("test?")

        let new_friend = $("#new_friend").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("send_request", username, new_friend, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
            //append new_friend to pending requests
            let pending_requests = $("#pending_requests").val();
            add_list_item(new_friend, pending_requests);
        });
    }

    function add_list_item(item, list) {
        //create list item
        var list_item = document.createElement("li");
        list_item.innerText = item;

        list.appendChild(list_item);
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, friend, room_id);
        $("#input_box").hide();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);

        //add message to message history
        const history = localStorage.getItem(friend_username);
        history.push(child);
    }

    //display plain text message history when a user joins a room 
    function show_history(message) {
        let box = $("#message_box");
        box.append(message);
    }
</script>
{% endblock %}