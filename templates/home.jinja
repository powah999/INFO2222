<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    nav {
        overflow: auto;
    }

    #message_box {
        border: 2px solid grey;
        height: 400px;
        width: 80%;
        overflow: auto;
        margin-top: 100px;
        padding: 2px;
        clear: both;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-left: 6px;
        margin-right: 6px;
        vertical-align: middle;
    }

    .online {
        background-color: green;
    }

    .offline {
        background-color: red;
    }

    .requests-list h2,
    .friends-list h2 {
        margin-top: 0;
    }

    .requests-list li,
    .friends-list li {
        display: block;
        margin-bottom: 10px;
        list-style-type: none;
    }

    .friends_requests_box {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-bottom: 10px;
    }

    .requests-list div,
    .friends-list div {
        border-bottom: none;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .requests-list span,
    .friends-list span {
        text-decoration: none;
    }

    #main-container {
        overflow: auto;
        clear: both;
    }

    .container {
        display: grid;
        grid-template-rows: repeat(3, 256px);
        grid-template-columns: minmax(1280px);
        grid-template-areas: 'friends' 'requests' 'pending';
        justify-items: center;
        align-items: center;
    }

    .item-1 {
        grid-area: friends;
    }

    .requests {
        grid-area: requests;
    }

    .pending {
        grid-area: pending;
    }

    .sidebar {
        height: 100%;
        width: 40px;
        /* Narrow width when not hovered */
        border: black;
        position: fixed;
        z-index: 1;
        top: 46px;
        right: 0px;
        background-color: grey;
        overflow-x: hidden;
        border: 1px solid rgba(0, 0, 0, 0.4);
        transition: 0.5s;
        padding-top: 60px;
    }

    .sidebar:hover {
        width: 250px;
        /* Full width on hover */
    }

    .sidebar a:hover {
        color: #f1f1f1;
    }

    .sidebar .closebtn {
        position: absolute;
        top: 0;
        right: 25px;
        font-size: 36px;
        margin-left: 50px;
    }

    .sidebar>* {
        display: none;
    }

    .sidebar:hover>* {
        display: block;
    }

    .openbtn {
        display: none;
    }

    #main {
        transition: margin-right .5s;
        padding: 16px;
        margin-right: 20px;
        /* Space for the slightly visible sidebar */
    }

    /* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size) */
    @media screen and (max-height: 450px) {
        .sidebar {
            padding-top: 15px;
        }

        .sidebar a {
            font-size: 18px;
        }
    }

    .popup {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
    }

    .popup-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }

    .friends-list-popup {
        list-style-type: none;
        padding: 0;
    }

    .friends-list-popup li {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .friends-list-popup input[type="checkbox"] {
        margin-left: 10px;
    }

    .popup-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .hover-text {
        position: fixed;
        top: 50%;
        right: 25px;
        transform: translateY(-50%);
        background-color: grey;
        color: white;
        padding: 5px;
        border-radius: 5px;
        z-index: 2;
    }

    .sidebar:hover+.hover-text {
        display: none;
    }

    .friend_requests_box,
    .list-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        /* Center align horizontally */
        justify-content: center;
        /* Center align vertically */
        margin-bottom: 20px;
        width: 100%;
        /* Make the width 100% to align with other containers */
    }

    .bottom-container {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
        width: 80%;
        /* Adjust this width as needed */
    }

    .chatroom,
    .groups {
        width: 48%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .groups-list {
        max-height: 200px;
        /* Adjust height as needed */
        overflow-y: auto;
    }

    .group-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    #input_box {
        margin-top: 20px;
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 80%;
        overflow: auto;
        padding: 2px;
        clear: both;
        margin-bottom: 20px;
        /* Ensure there's space between message box and input box */
    }


    body.light-mode {
        background-color: white;
        color: black;
    }

    body.dark-mode {
        background-color: black;
        color: white;
    }

    .toggle-button {
        position: fixed;
        top: 10px;
        right: 10px;
        padding: 10px;
        cursor: pointer;
        background-color: grey;
        border: none;
        border-radius: 5px;
        color: white;
    }

    body.light-mode #message_box {
        border-color: black;
    }

    body.dark-mode #message_box {
        border-color: white;
        background-color: grey;
    }

    body.light-mode .sidebar {
        background-color: white;
        border-color: black;
    }

    body.dark-mode .sidebar {
        background-color: #333;
        border-color: white;
    }
</style>

<!--Navbar code / links-->
<ul class="navbar">
    <li><a href="{{ url_for('articles', username=username) }}">Home</a></li>
    <li><a href=" {{ url_for('home', username=username) }}">Messages</a></li>
    <li><a href="{{ url_for('new_article') }}">New Article</a></li>
    {% if account == "staff" %}
        <li><a href="{{ url_for('users') }}">User permissions</a></li>
    {% endif %}
    <li class="right"><a class="active" href="{{ url_for('logout')}}">Sign Out</a></li>
    <li><button id="toggle-button">Toggle Dark Mode</button></li>
</ul>

<div class="sidebar-arrow">â–¶</div>

<!-- Container for friend lists -->
<div id="mySidebar" class="sidebar">
    <div id="main-container">
        <div class="list-container">
            <div class="friend_requests_box">
                <p class="text">Send a friend request to: </p>
                <input id="new_friend" placeholder="username">
                <button onclick="send_friend_request()">Send request</button>
            </div>
        </div>
        <!-- Friends List -->
        <div class="list-container">
            <ul id="friend_list" class="friends-list">
                <h2>My friends:</h2>
                {% if friends != [] and friends is not none and friends != -1 %}
                {% for friend in friends %}
                <li>
                    <div id="{{ friend.username | escape}}-role">
                        <span>role: {{friend_roles[friend.username]}}</span>
                    </div>
                    <div class="{{ friend.username | escape }}-friend">
                        <span>{{ friend.username | escape }}</span>
                        <div id="{{ friend.username | escape }}-status"
                            class="status-indicator {{ friend_status.get(friend.username, 'offline') }}"></div>
                        <button onclick="join_room('{{ friend.username | escape }}')">Chat</button>
                        <button onclick="removeFriend('{{ friend.username | escape }}')">Remove Friend</button>
                    </div>
                </li>
                {% endfor %}
                {% endif %}
            </ul>
        </div>

        <!-- Received Friend Requests -->
        <div class="list-container">
            <ul id="received_requests" class="requests-list">
                <h2>Received friend requests:</h2>
                {% if received != [] and received is not none and received != -1 %}
                {% for request in received %}
                <li>
                    <div class="{{ request.sender | escape }}">
                        <span>{{ request.sender | escape }}</span>
                        <button onclick="accept('{{ request.sender | escape }}')">Accept</button>
                        <button onclick="decline('{{ request.sender | escape }}')">Decline</button>
                    </div>
                </li>
                {% endfor %}
                {% endif %}
            </ul>
        </div>

        <!-- Pending Friend Requests -->
        <div class="list-container">
            <ul id="pending_requests" class="requests-list" style="margin-top: 20px;">
                <h2>Pending friend requests:</h2>
                {% if pending != [] and pending is not none and pending != -1 %}
                {% for request in pending %}
                <li>
                    <div class="{{ request.receiver | escape }}">
                        {{ request.receiver | escape }}
                    </div>
                </li>
                {% endfor %}
                {% endif %}
            </ul>
        </div>
    </div>
</div>

<div class="hover-text">Hover over this part -></div>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <div class="chatinput">
        <section id="chat_box" style="display: none">
            <p class="text">Chat with: </p>
            <input id="receiver" placeholder="username">
            <button onclick="join_room()">Chat</button>
        </section>

        <section id="input_box" style="display: none">
            <p class="text">Message: </p>
            <input id="message" placeholder="message">
            <button onclick="send()">Send</button>
            <button onclick="leave()">Leave Room</button>
        </section>
    </div>

    <!-- Chat box, friend requests box, and input box -->
    <div class="bottom-container">
        <div class="chatroom">
            <h2>Chatroom</h2>
            <button onclick="openGroupChatPopup()">Create a group chat</button>
        </div>

        <div class="groups">
            <h3>Groups:</h3>
            {% if groups != [] and groups is not none and groups != -1 %}
            <div class="groups-list">
                {% for groupname in groups %}
                <div class="group-item">
                    <span>{{groupname}}</span>
                    <button onclick="join_room_group('{{ groupname }}')">Join</button>
                </div>
                {% endfor %}
            </div>
            {% endif %}
        </div>
    </div>

    <div id="groupChatPopup" class="popup">
        <div class="popup-content">
            <h2>Create Group Chat</h2>
            <label for="groupName">Group Name:</label>
            <input type="text" id="groupName" name="groupName" required>
            <ul id="friend_list_popup" class="friends-list-popup">
                <!--friends here-->
            </ul>
            <div class="popup-buttons">
                <button onclick="createGroupChat()">Create</button>
                <button onclick="closeGroupChatPopup()">Cancel</button>
            </div>
        </div>
    </div>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cryptico/0.0.1343522940/cryptico.min.js"></script>
<script>
    let room_id = 0;

    function toggleDarkMode() {
        const currentMode = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
        const newMode = currentMode === 'dark' ? 'light' : 'dark';
        document.body.classList.remove(currentMode + '-mode');
        document.body.classList.add(newMode + '-mode');
        Cookies.set('mode', newMode);
    }

    document.getElementById('toggle-button').addEventListener('click', toggleDarkMode);

    document.querySelector('.sidebar-arrow').addEventListener('mouseover', function () {
        document.querySelector('.sidebar').classList.add('hover');
    });

    document.querySelector('.sidebar').addEventListener('mouseleave', function () {
        document.querySelector('.sidebar').classList.remove('hover');
    });

    (function (c) {
        var parametersBigint = ["n", "d", "p", "q", "dmp1", "dmq1", "coeff"];
        c.privateKeyFromString = function (string) {
            var keyObj = JSON.parse(string);
            var rsa = new RSAKey();
            parametersBigint.forEach(function (parameter) {
                rsa[parameter] = parseBigInt(c.b64to16(keyObj[parameter].split("|")[0]), 16);
            });
            rsa.e = parseInt("03", 16);
            return rsa
        }
    })(cryptico)

    function openGroupChatPopup() {
        const popup = document.getElementById("groupChatPopup");
        const friendListPopup = document.getElementById("friend_list_popup");

        // Clear any existing friends in the popup
        friendListPopup.innerHTML = '';

        // Get the friends from the main friend list
        const friends = document.querySelectorAll("#friend_list li");

        friends.forEach(friend => {
            // Extract the friend's name from the correct span
            const friendName = friend.querySelector("div[class$='-friend'] span").textContent;
            const li = document.createElement("li");
            li.innerHTML = `${friendName} <input type="checkbox" value="${friendName}">`;
            friendListPopup.appendChild(li);
        });

        popup.style.display = "block";
    }


    function closeGroupChatPopup() {
        const popup = document.getElementById("groupChatPopup");
        popup.style.display = "none";
    }

    function createGroupChat() {
        const groupName = document.getElementById("groupName").value.trim();
        if (!groupName) {
            alert("Group name cannot be empty!");
            return;
        }

        const checkedFriends = document.querySelectorAll("#friend_list_popup input[type='checkbox']:checked");
        const listOfFriends = Array.from(checkedFriends).map(checkbox => checkbox.value);
        create_group_div(groupName, listOfFriends);
        closeGroupChatPopup();
    }


    function create_group_div(groupname, friendlist) {

        console.log("Creating group chat:", groupname, "with friends:", friendlist);
        const chatroomDiv = document.querySelector('.groups');
        const groupDiv = document.createElement('div');
        groupDiv.className = 'group';
        groupDiv.innerHTML = `
        <span>${groupname}</span>
        <button onclick="join_room_group('${groupname}')">Join</button>
    `;
        chatroomDiv.appendChild(groupDiv);
        console.log(friendlist)
        socket.emit("create_group", { groupname, friendlist }, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
        });
    }


    function join_room_group(groupname) {


        socket.emit("join_group", groupname, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
            room_id = res;
            Cookies.set("groupname", groupname);
            Cookies.set("friendname", '');
            Cookies.set("room_id", room_id);
            $("#chat_box").hide();
            $("#input_box").show();
        });
    }

    // Close the popup if the user clicks outside of it
    window.onclick = function (event) {
        const popup = document.getElementById("groupChatPopup");
        if (event.target == popup) {
            closeGroupChatPopup();
        }
    }

    function toggleDarkMode() {
        const button = document.getElementById('toggleButton');
        document.body.classList.toggle('dark-mode');
        button.textContent = document.body.classList.contains('dark-mode') ? 'Light Mode' : 'Dark Mode';
    }

    function openNav() {
        document.getElementById("mySidebar").style.width = "250px";
        document.getElementById("main").style.marginLeft = "250px";
    }

    function closeNav() {
        document.getElementById("mySidebar").style.width = "0";
        document.getElementById("main").style.marginLeft = "0";
    }




    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $("#new_friend").on("keyup", (e) => {
        if (e.key == "Enter") {
            send_friend_request();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        // $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    //xss input sanitization
    function htmlEncode(str) {
        return String(str).replace(/[^\w. :]/gi, function (c) {
            return '&#' + c.charCodeAt(0) + ';';
        });
    }

    let username = htmlEncode("{{ username }}");

    Cookies.set('username', username, { secure: true, expires: 1 });

    // initializes the socket
    const socket = io();

    socket.on("pubkey_first", (data) => {
        localStorage.setItem(data.guy, data.pubkey);
        let pubkey = localStorage.getItem('public');
        let friendname = Cookies.get('friendname');
        socket.emit("exchange", friendname, pubkey, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
        });
    })

    socket.on("pubkey_second", (data) => {
        localStorage.setItem(data.guy, data.pubkey);
    })

    socket.on("historydump_group", (data) => {
        for (let i = 0; i < data.length; i++) {
            let e = data[i]
            if (e[2] == 'msg') {
                add_message(e[0], e[1]);
            } else {
                add_message(('Server: ' + e[0]), e[1])
            }
        }
    })

    socket.on("incoming_group", (data) => {
        let msg = data[0];
        let color = data[1];
        let msgtype = data[2];
        add_message(msg, color);
    })

    socket.on("historydump", (data) => {
        for (let i = 0; i < data.length; i++) {
            let e = data[i]
            if (e[2] == 'msg') {
                try {
                    let priv = cryptico.privateKeyFromString(localStorage.getItem("private"));
                    console.log(e[0].cipher)
                    let a = cryptico.decrypt((e[0]).cipher, priv);
                    add_message(a.plaintext, e[1]);
                } catch (error) {
                    console.error("Decryption failed: ", error);
                }
            } else {
                add_message(('Server: ' + e[0]), e[1])
            }
        }
    })

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color, msgtype) => {
        if (msgtype == 'msg') {
            try {

                let priv = cryptico.privateKeyFromString(localStorage.getItem("private"));
                let friendpub = cryptico.publicKeyID(localStorage.getItem(Cookies.get('friendname')));
                let a = (cryptico.decrypt(msg.cipher, priv));
                console.log(a)
                if (cryptico.publicKeyID(a.publicKeyString) == friendpub) {
                    console.log('ARRR')
                    add_message(a.plaintext, color);
                    let pubkey = localStorage.getItem('public');
                    let newmsg = cryptico.encrypt(a.plaintext, pubkey)
                    socket.emit("receiver_encrypt", newmsg, room_id);
                }
            } catch (error) {
                console.error("Decryption failed", error);
            }
        } else {
            add_message(('Server: ' + msg), color);
        }
    })

    socket.on('status_update', (data) => {
        const statusElement = document.getElementById(`${data.username}-status`);
        if (statusElement) {
            statusElement.className = `status-indicator ${data.status}`;
        }
    });

    // we'll send the message to the server by emitting a "send" event
    function send() {
        //xss
        let groupname = Cookies.get('groupname');
        console.log(groupname)
        console.log(Cookies.get('friendname'))
        if (groupname != '') {
            console.log("group PASS")
            let message = $("#message").val();
            $("#message").val("");
            socket.emit("send_group", groupname, message, room_id);
        } else if (Cookies.get('friendname') != '') {
            let tempmsg = htmlEncode($("#message").val());

            let message = username + ": " + tempmsg

            //encrypt message with receiver's public key (encrypt_key)
            let friendname = Cookies.get('friendname');
            let friend_key = localStorage.getItem(friendname);
            let our_key = localStorage.getItem('public');

            let priv = cryptico.privateKeyFromString(localStorage.getItem("private"));

            let forfriend = cryptico.encrypt(message, friend_key, priv);
            let forus = cryptico.encrypt(message, our_key);

            socket.emit("send", friendname, forfriend, forus, room_id, (res) => {
                if (typeof res == "string") {
                    alert(res);
                    return;
                } else {
                    add_message(message, "black");
                }
            });

        }



    }


    // we emit a join room event to the server to join a room
    function join_room(rec) {
        //xss
        let receiver = htmlEncode(rec)
        console.log(receiver)

        // pass in the receiver of our message to the server
        // as well as the current user's username
        Cookies.set('friendname', receiver);
        Cookies.set('groupname', '');
        console.log()
        let publickey = localStorage.getItem('public');
        socket.emit("join", receiver, publickey, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res == "string") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);


            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();


        });
    }


    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        if (Cookies.get('friendname') != '') {
            let friendname = Cookies.get('friendname')
            //add_message(`${username} has left the room`, 'red');
            socket.emit("leave", friendname, room_id, (res) => {
                if (typeof res == "string") {
                    alert(res);
                    return;
                } else {

                }
            });
            Cookies.set('friendname', '');
            $("#input_box").hide();
            let box = $("#message_box");
            box.empty();
            room_id = 0;
        } else if (Cookies.get('groupname') != '') {
            let groupname = Cookies.get('groupname');
            socket.emit("leave_group", groupname, (res) => {
                if (typeof res == "string") {
                    alert(res);
                    return;
                } else {

                }
            });
            Cookies.set('groupname', '');
            $("#input_box").hide();
            let box = $("#message_box");
            box.empty();
            room_id = 0;

        }
    }

    function accept(sender) {
        let sender_name = htmlEncode(sender);

        socket.emit("accept", sender_name, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            }
            displayFriend(sender_name)
            removeRequest(sender_name)

        });

    }

    function decline(sender) {
        let sender_name = htmlEncode(sender);

        socket.emit("decline", sender_name, (res) => {
            if (typeof res == "string") {
                alert(res);
                return;
            } else {
                removeRequest(sender_name)
            }
        });

    }

    // Removes a displayed sent request (Client side)
    function removeRequest(senderName) {
        // Get all <li> elements inside the received requests list
        let liElements = document.querySelectorAll("#received_requests li");
        console.log(liElements)
        // Loop through each <li> element
        liElements.forEach(function (li) {
            // Find the <div> element inside the <li>
            var div = li.querySelector("." + senderName);
            if (div) {
                // Remove the <div> element from its parent node (the <li>)
                div.parentNode.removeChild(div);
            }
        });
    }


    // Emit a send_request event to the server to make a new friend request
    function send_friend_request() {
        //xss
        let new_friend = htmlEncode($("#new_friend").val());
        console.log(new_friend)

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("send_request", new_friend, (res) => {
            if (res != 0) {
                alert(res);
                return;
            } else {
                displayPending(new_friend);
            }
        });


    }



    // Displays your pending requests (client side)
    function displayPending(fri) {
        // Get the UL element

        //xss
        let friend = htmlEncode(fri);

        var ul = document.getElementById("pending_requests");

        //li
        var li = document.createElement("li");
        li.style.display = "inline-block";

        //div
        var div = document.createElement("div");
        div.className = friend;

        //span
        var span = document.createElement("span");
        span.textContent = htmlEncode(friend);

        div.appendChild(span);
        li.appendChild(div);
        ul.appendChild(li);
    }


    //Check if one of your requests got accepted
    socket.on("check_accepted_requests", (sender) => {
        displayFriend(sender);
        removePending(sender);
    })

    //Check if one of your requests got declined
    socket.on("check_declined_requests", (sender) => {
        removePending(sender);
    })

    // Removes pending request (client side)
    function removePending(senderName) {
        let liElements = document.querySelectorAll("#pending_requests li");
        console.log(liElements);
        liElements.forEach(function (li) {
            var div = li.querySelector("." + senderName);
            console.log(div)
            if (div) {
                div.parentNode.removeChild(div);
                console.log("removed");
            }
        });
    }

    //Check for any incoming requests
    socket.on("incoming_request", (sender) => {
        if (sender == Cookies.get('username')) {

        } else {
            displayRequest(sender);
        }
    })

    //Displays a request that you received from someone (client side)
    function displayRequest(sender) {
        //xss
        let sender_name = htmlEncode(sender)

        var ul = document.getElementById("received_requests");

        var li = document.createElement("li");
        li.style.display = "inline-block";

        var div = document.createElement("div");
        div.className = sender;

        //span
        var span = document.createElement("span");
        span.textContent = htmlEncode(sender_name);

        //accept button
        var acceptBtn = document.createElement("button");
        acceptBtn.textContent = "Accept";
        acceptBtn.onclick = function () {
            accept(sender_name);
        };

        //decline button
        var declineBtn = document.createElement("button");
        declineBtn.textContent = "Decline";
        declineBtn.onclick = function () {
            decline(sender_name);
        };

        // Append span, buttons to  div
        div.appendChild(span);
        div.appendChild(acceptBtn);
        div.appendChild(declineBtn);

        // Append div to list
        li.appendChild(div);

        // Append list to ul
        ul.appendChild(li);
    }

    function displayFriend(fri) {
        let friend = htmlEncode(fri);

        var ul = document.getElementById("friend_list");

        var li = document.createElement("li");
        li.className = "friends-list-item";

        var div = document.createElement("div");
        div.className = fri + '-friend';

        var span = document.createElement("span");
        span.textContent = friend;

        socket.emit("get_status", friend, (status) => {
            var statusIndicator = document.createElement("div");
            statusIndicator.id = `${friend}-status`;
            statusIndicator.className = `status-indicator ${status[0]}`;  // Assign existing styles (online/offline)

            var chatBtn = document.createElement("button");
            chatBtn.textContent = "Chat";
            chatBtn.onclick = function () {
                join_room(friend);
            };

            var newdiv = document.createElement("div");
            newdiv.id = `${friend}-role`;
            var span2 = document.createElement("span");
            span2.textContent = `role: ${status[1]}`;
            newdiv.appendChild(span2);

            var rmvBtn = document.createElement("button");
            rmvBtn.textContent = "Remove Friend";
            rmvBtn.onclick = function () {
                removeFriend(friend);
            };

            // Append all elements to the main div with the correct class
            div.appendChild(span);
            div.appendChild(statusIndicator);
            div.appendChild(chatBtn);
            div.appendChild(rmvBtn);

            // Append the div to the list item, then add it to the list container
            li.appendChild(newdiv);
            li.append(div)

            ul.appendChild(li);
        });

    }


    function removeFriend(username) {
        // Remove the role div
        var confirmRemoval = confirm("Are you sure you want to remove " + username + " as a friend?");
        if (confirmRemoval) {
            var roleDiv = document.getElementById(username + '-role');
            if (roleDiv) {
                roleDiv.parentNode.removeChild(roleDiv);
            }

            // Remove the entire friend div
            var friendDiv = document.querySelector('.' + username + '-friend');
            if (friendDiv) {
                friendDiv.parentNode.removeChild(friendDiv);
            }

            socket.emit("remove_friend", username);
        }
    }

    function removeFriendSecond(username) {
        // Remove the role div
        var roleDiv = document.getElementById(username + '-role');
        if (roleDiv) {
            roleDiv.parentNode.removeChild(roleDiv);
        }

        // Remove the entire friend div
        var friendDiv = document.querySelector('.' + username + '-friend');
        if (friendDiv) {
            friendDiv.parentNode.removeChild(friendDiv);
        }

        socket.emit("remove_friend", username);
    }


    socket.on("yougotremoved", (friend) => {
        removeFriendSecond(friend);
    })


    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color, flag = false) {
        let box = $("#message_box");

        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(htmlEncode(message));//xss prevention
        box.append(child);
    }


    window.onbeforeunload = function () {
        Cookies.remove("room_id");
        Cookies.remove("friendname");
        //uncomment once final
        //Cookies.remove("username");
        //localStorage.clear();
    };

</script>
{% endblock %}