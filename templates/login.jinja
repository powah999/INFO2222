<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %}
<h1>Login</h1>
<p>Username</p>
<input id="username" />
<p>Password</p>
<input id="password" type="password" />
<button onclick="login()">Login</button>


<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cryptico/0.0.1343522940/cryptico.min.js"></script>
<script>

    // basically checks if the server returns an Error message instead of a URL
    // this is a pretty terrible way of handling error generated by the server, but it works...
    function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
    }

    function htmlEncode(str){
        return String(str).replace(/[^\w. ]/gi, function(c){
            return '&#'+c.charCodeAt(0)+';';
            });
        }

    // login function to well login...
    async function login() {
        // this fancy syntax is part of the Jinja syntax
        // login_user is a Python function, this gets the URL that calls that Python function
        // you know the one with the:
        // app.route("/login/user", methods=["POST"])
        // login_user()
        // so... "{{ url_for('login_user')}}" 
        // gives us -> "http://blabla/login/user"

        var password = htmlEncode($("#password").val());
        let loginURL = "{{ url_for('login_user') }}";

         //salt
        var salt = CryptoJS.lib.WordArray.random(128 / 8);

        //PBKDF2 key object
        var hash = CryptoJS.PBKDF2(password, salt, {
            keySize: 256 / 32,
            iterations: 1000
        });

        //PBKDF2 key string format
        var stringHash = derivedKey.toString(CryptoJS.enc.Base64);

        var privateKey = cryptico.generateRSAKey(password, 2048);
      

        // axios post is a fancy way of posting a request to the server,
        // we pass in the username and password here
        let res = await axios.post(loginURL, {
            username: htmlEncode($("#username").val()),
            password: stringHash,
        });

        // if the server sends in an error message, alert() the error message
        if (!isValidURL(res.data)) {
            alert(res.data);
            return;
        }        

        //store derived and private key in local storage?
        localStorage.setItem("private", privateKey);
      

        window.open(res.data, "_self")
    }
</script>
{% endblock %}