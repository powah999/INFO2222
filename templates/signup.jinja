<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %}
<h1>Sign Up</h1>
<p>Username</p>
<input id="username" />
<p>Password</p>
<input id="password" type="password" />
<button onclick="signup()">Sign up</button>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cryptico/0.0.1343522940/cryptico.min.js"></script>
<script>
    function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
    }

    //password requirements
    function isValidPwd(password) {
        if (password.length < 12) {
            alert("Password length must be at least 12 characters!");
        }
        else if (!/\d/.test(password)) {
            alert("Password requires at least one numeric character!");
        }
        else if (!/[a-z]/i.test(password)) {
            alert("Password requires at least one alphabetic character!");
        }
        else if (!/[^A-Za-z0-9]/.test(password)) {
            alert("Password requires at least one special character!");
        }
        else {
            return true;
        }
        return false;
    }

    // this function is identical to login(), see login.jinja
    async function signup() {

        var password = $("#password").val();

        //if (!isValidPwd(password)) {
        //    return;
        //}

        //password hash
        //var hash = CryptoJS.SHA3(password, { outputLength: 256 }).toString(CryptoJS.enc.Hex);

        let loginURL = "{{ url_for('signup_user') }}";

       // let res1 = await axios.post(loginURL, {
       //     username: $("#username").val(),
       //     requestType: 'password'
       // });

      //  if (res1.data != 'pass') {
       //     alert(res1.data);
       //     return;
       // }

        //salt
        var salt = CryptoJS.lib.WordArray.random(128 / 8);

        //PBKDF2 key object
        var hash = CryptoJS.PBKDF2(password, salt, {
            keySize: 256 / 32,
            iterations: 1000
        });

        //PBKDF2 key string format
        var stringHash = derivedKey.toString(CryptoJS.enc.Base64);

        var privateKey = cryptico.generateRSAKey(password, 2048);
        var publicKey = cryptico.publicKeyString(privateKey);




        let res = await axios.post(loginURL, {
            username: $("#username").val(),
            password: stringHash,
            public: publicKey,
        });

        if (!isValidURL(res.data)) {
            alert(res.data);
            return;
        }

        //store derived and private key in local storage?
       // localStorage.setItem("derived", stringKey);
        localStorage.setItem("private", privateKey);
       // localStorage.setItem("public", publicKey);

        window.open(res.data, "_self")
    }
</script>
{% endblock %}