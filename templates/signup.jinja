<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    .container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        }

</style>

<div class="container">
<h1>Sign Up</h1>
<p>Username</p>
<input id="username" />
<p>Password</p>
<input id="password" type="password" />
<br><br>
<label for="account">Please select an account type:</label>
<select name="account" id="accounts">
    <option value="student">Student</option>
    <optgroup label="staff">
        <option value="academic">Academic</option>
        <option value="administrative staff">Administrative staff</option>
        <option value="admin user">Admin user</option>
    </optgroup>
</select>
<button onclick="signup()">Sign up</button>

<br/><br/>
Already have an account?
<a href={{ url_for('login') }}>Click here to login!</a>

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cryptico/0.0.1343522940/cryptico.min.js"></script>
<script>
    function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
    }


    //password requirements
    function isValidPwd(password) {
        if (password.length < 12) {
            alert("Password length must be at least 12 characters!");
        }
        else if (!/\d/.test(password)) {
            alert("Password requires at least one numeric character!");
        }
        else if (!/[a-z]/i.test(password)) {
            alert("Password requires at least one alphabetic character!");
        }
        else if (!/[^A-Za-z0-9]/.test(password)) {
            alert("Password requires at least one special character!");
        }
        else {
            return true;
        }
        return false;
    }

    (function (c) {
        var parametersBigint = ["n", "d", "p", "q", "dmp1", "dmq1", "coeff"];

        c.privateKeyString = function (rsakey) {
            var keyObj = {};
            parametersBigint.forEach(function (parameter) {
                keyObj[parameter] = c.b16to64(rsakey[parameter].toString(16));
            });
            // e is 3 implicitly
            return JSON.stringify(keyObj);
        }
    })(cryptico)

    function htmlEncode(str) {
        return String(str).replace(/[^\w. ]/gi, function (c) {
            return '&#' + c.charCodeAt(0) + ';';
        });
    }

    // this function is identical to login(), see login.jinja
    async function signup() {

        var password = $("#password").val();
        var username = htmlEncode($("#username").val());
        var account = $("#accounts").val();
        let loginURL = "{{ url_for('signup_user') }}";

        //if (!isValidPwd(password)) {
        //    return;
        //}

        let res1 = await axios.post(loginURL, {
            username: username,
            requestType: 'password'
        });

        if (res1.data != 'pass') {
            alert(res1.data);
            return;
        }

        //salt
        var salt2 = CryptoJS.lib.WordArray.random(128 / 8);
        var salt2String = salt2.toString(CryptoJS.enc.Hex)


        //password hash
        var hash = CryptoJS.SHA3((password + salt2String), { outputLength: 256 }).toString(CryptoJS.enc.Hex);


        //PBKDF2 key object and string format
        var derivedKey = CryptoJS.PBKDF2(password, salt2, {
            keySize: 256 / 32,
            iterations: 1000
        });

        var stringDerived = derivedKey.toString(CryptoJS.enc.Base64);
        var privateKey = cryptico.generateRSAKey(stringDerived, 2048);
        var publicKey = cryptico.publicKeyString(privateKey);


        let res2 = await axios.post(loginURL, {
            username: username,
            password: hash,
            public: publicKey,
            salt: salt2String,
            account: account,
            requestType: 'key'
        });

        if (!isValidURL(res2.data)) {
            alert(res2.data);
            return;
        }

        //store derived and private key in local storage?
        localStorage.setItem("private", cryptico.privateKeyString(privateKey));
        localStorage.setItem("public", publicKey);

        window.open(res2.data, "_self")
    }
</script>
{% endblock %}